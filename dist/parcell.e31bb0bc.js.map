{"version":3,"sources":["medicalInstitution/Person.js","medicalInstitution/Doctor.js","medicalInstitution/Patient.js","medicalInstitution/BloodSugarExam.js","medicalInstitution/BloodPressureExam.js","medicalInstitution/BloodCholesterolExam.js","medicalInstitution/AppointmentRecord.js","medicalInstitution/AppointmentSchedule.js","index.js"],"names":["Person","firstName","lastName","_firstName","_lastName","Doctor","specialty","_specialty","_patients","patient","patients","push","Patient","id","medicalNumber","doctor","choosenDoctor","BloodSugarExam","lastMealTime","Date","getTime","sugarLevel","Math","floor","random","BloodPressureExam","pulse","upperValue","lowerValue","BloodCholesterolExam","cholesterolLevel","AppointmentRecord","schedule","exam","type","execute","AppointmentSchedule","scheduledDate","scheduledTime","date","milan","console","log","dragan","chooseTheDoctor","appointment1","appointment2","record1","returnResults","record2"],"mappings":";;AQAA;;AACA;;AACA;AFFA,ALAA,ACAA;AMGA;AFFA,INDMA,SAEL,gBAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AQElC,ARFkC;AMAlC;AEKA,ARJE,CQID,MRJMC,MQIK,IRJV,GAAkBF,SAAlB;AQMD,ARLC,IOJImC,AFAAP,ADAAJ,ADAAR,EKSDsB,CRLEnC,GQKE,GAAG,GRLV,CQKce,ERLGjB,EQKP,EAAX,IRLC;AQOD,ADTA,AFAA,ADAA,ADAA,AHGC,MQMGsC,KAAK,GAAG,IAAInC,ULTF,GIAFU,AHAE,CISF,CAAW,CHTT,GEAd,EAAoBN,CCSR,EAAoB,IDThC,EAA6ByB,IAA7B,ECSY,ADTuBG,ECSW,WDT9C,EAAkDC,KCStC,CAAZ,ODTA,EAAiE;ACUjEG,ADViE,AFAnD,ADAA,ADAA,EKUdA,OAAO,CAACC,GAAR,aAAiBH,IAAjB;AAEA,MAAII,MAAM,GAAG,IAAI/B,gBAAJ,CAAY,QAAZ,EAAsB,YAAtB,EAAmC,aAAnC,EAAkD,EAAlD,CAAb;AACA6B,ADZC,AFAA,ADAA,ADAA,EKYDA,OAAO,ADZDP,AFAAhB,ADAAQ,ADAAR,CKYEwB,GAAR,ADZC,CHAA,EGAYR,CHACZ,GGAb,CFAA,ADAiB,ADAjB,CCAkBC,ECAEJ,AFAAA,EKYJoB,CJZH,CCAW,ADACjB,ADAD,CEACF,AFAAA,CKY1B,EJZ8B,CAACI,GCAV,AFAA,EEApB,AFAA,CCAyB,KAAgB,GAAjB,GAAwB,CAAnC,CAAb;AIcDmB,ADbC,AFAA,ADAA,ADAA,EKaDA,MAAM,CAACC,ADbD7B,AFAAe,ADAAH,ADAAN,MIAL,GAAcN,CHAd,ADAA,GCAkBO,ADAAA,EKanB,ADbC,CCasBkB,AHbtB,CDAsB,ADAA,CCACjB,ADAAA,CEACD,EGazB,EHb6B,ADAV,ADAA,CEAWC,ADACD,ADAAA,ICAI,ADAA,CEAV,ADAWE,ADAAA,CEACF,IAAI,CAACE,ADAX,ADAA,KCAgB,ADAA,CEAV,CFAP,CCAA,EDAuB,CEAA,ADAC,ADAnC,CCAA,ADAlB,CEAmC,ADAnC,GCA0D,CAAlC,CAAxB;AGcDiB,ADbC,AFAA,ADAA,ADAA,EKaDA,EFdKV,KEcE,ADbDtB,AHAAmB,CIaEc,GAAR,GDbC,GAAejC,AHAf,GAAkBa,IIaFiB,ADbhB,AHAsB,CAAChB,GIaxB,EJbmB,CAAYD,IAAI,CAACE,MAAL,KAAgB,GAAjB,GAAwB,CAAnC,CAAlB;AIeD,AFdA,ACAC,AHAA,MIcGqB,GDdER,SCcU,GAAG,CDdlB,GCcsBD,ADdDC,IDAVL,QAAZ,CCAC,CDAqB,0BEcH,CAAwB,aAAxB,EAAuCQ,KAAvC,EAA8CG,MAA9C,EAAsDJ,IAAtD,EAA4DA,IAAI,CAACnB,OAAL,EAA5D,CAAnB;AACAqB,AFfsB,ACCrB,ECcDA,OAAO,ADdDH,CCcEI,GAAR,CAAYG,QDdX,GAAqBP,CCcE,CAACN,QAAb,EAAZ,CDdC;ACeD,ADdC,MCcGc,YAAY,GAAG,IAAIV,wCAAJ,CAAwB,gBAAxB,EAA0CI,KAA1C,EAAiDG,MAAjD,EAAyDJ,IAAzD,EAA+DA,IAAI,CAACnB,OAAL,EAA/D,CAAnB;AACAqB,AFhBC,EEgBDA,OAAO,AFhBDT,CEgBEU,GAAR,CAAYI,GFhBX,GAAgBd,MEgBO,CAACA,CFhBxB,EDAS,AFAA,KKgBE,EAAZ;AAEA,AFjBC,ADAA,AFAA,MKiBGe,OAAO,GAAG,IAAIhB,UJjBR,sBDA8B,IKiB1B,CAAsBc,ALjBSxB,CEAC,KAAKS,IFAlD,EKiBa,CAAd,SHjBC,IFA4D,KAAKZ,OEAO,KAAKA,AFA7E,YEAA;AGkBDuB,AHjBC,ADAA,ADAA,EKiBDA,OAAO,CAACC,GAAR,aAAiB,IAAIvB,IAAJ,EAAjB,gBAA+B4B,GJjBY,IIiBL,CAACC,AJjBSrB,UAA/C,GIiB8B,EAA/B,WJjBgE,KAAKC,UAApE,eAAmF,KAAKF,KAAxF;AIkBD,AJjBC,MIiBGuB,OAAO,GAAG,IAAIlB,WDjBP,yBCiBG,CAAsBe,YAAtB,CAAd;AACAL,ADjBC,ECiBDA,OAAO,CAACC,GAAR,cAAkB,IAAIvB,IAAJ,CDjBM,CCiBxB,IDjB6Be,IAA5B,QCiB+Be,OAAO,CAACD,IDjBG,KAAKvC,ICiBhB,EAAhC,CDjB2C,CAAaR,SAAvD,wDAA8G,KAAKc,MAAL,CAAYd,SAA1H,iBAA0I,KAAKoC,aAA/I,iBAAmK,KAAKC,aAAxK;ACmBD,ADlBC,CCLF,mCFGiB;AACf,UAAIL,IAAJ;;AAEA,ILXI5B,ACAAO,UIWG,KAAKoB,QAAL,CAAcE,IAArB;AACC,aAAK,gBAAL;AACCD,UAAAA,IAAI,GAAG,IAAIR,oCAAJ,EAAP;AACA;;AACD,ALbF,ACAA,aIaO,KLbKxB,CCAAA,QDAZ,CCAA,CDAuBC,CCAAA,EIarB,KLbF,CCAA,CDAiCI,CCAAO,EAAjC,EAAqCC,IDArC,EAA4C,OCA5C,EAAoD;AIcjDmB,ALdyC,ACAQ,UIcjDA,IAAI,GAAG,IAAIJ,0CAAJ,EAAP;AACA;ALfyC,ACAQ;AIgBlD,aAAK,aAAL;AACCI,ALhBF,ACAA,UIgBEA,IAAI,GAAG,IAAIhB,SLhBPhB,ACAAA,SDAN,ACAA,EDAgBC,ACAAA,QDAhB,ACAA,EIgBS,EAAP;AACA,ALhBF,ACAA,UDAKK,ACAAM,EAAL,GAAUA,EAAV,GDAA,GAAkBP,SAAlB;AACA,ACAA,UDAKE,ACAAM,SDAL,GAAiB,CCAjB,CDAA,ECAqBA,aAArB;AIgBC,ALnB0C,ACAQ;AIoBjDmB,ALhBF,ACAA,UIgBEA,IAAI,GAAG,IAAIR,oCAAJ,EAAP;AACA;AAZF;;AAeA,4BAAe,GLlBLhB,EKkBUuB,GJlBLjB,IDAI,CKkBJ,CAAcmB,EJlBN,EIkBvB,wCAA+D,KAAKF,QAAL,CAAcvB,OAAd,CAAsBR,SAArF,mBAAuGgC,IAAI,CAACE,OAAL,EAAvG;AAEA,ALnBA,ACAA,WDAKzB,ACAAM,QDAL,CAAcL,IAAd,ACAA,CDAmBF,ECAEM,KDArB,CCAA;ADCA,ACAA;;;;EDVmBf,ACACA","file":"parcell.e31bb0bc.js","sourceRoot":"..","sourcesContent":["class Person {\r\n\r\n\tconstructor(firstName, lastName) {\r\n\t\tthis._firstName = firstName;\r\n\t\tthis._lastName = lastName;\r\n\t}\r\n}\r\n\r\nexport { Person }","import { Person }   from './Person.js';\r\n\r\nclass Doctor extends Person {\r\n\r\n\tconstructor(firstName, lastName, specialty) {\r\n\t\tsuper(firstName,lastName);\r\n\t\tthis._specialty = specialty;\r\n\t\tthis._patients = [];\r\n\t}\r\n\r\n\taddPatient(patient) {\r\n\t\tthis.patients.push(patient);\r\n\t}\r\n\r\n}\r\nexport { Doctor }","import { Person } from './Person.js';\r\n\r\nclass Patient extends Person{\r\n\r\n\tconstructor(firstName, lastName, id, medicalNumber) {\r\n\t\tsuper(firstName,lastName);\r\n\t\tthis.id = id;\r\n\t\tthis.medicalNumber = medicalNumber;\r\n\t}\r\n\r\n\tchooseTheDoctor(doctor) {\r\n\t\tthis.choosenDoctor = doctor;\r\n\t}\r\n\r\n}\r\nexport { Patient }","class BloodSugarExam{\r\n\r\n\tconstructor() {\r\n\t\tthis.lastMealTime = Date.getTime();\r\n\t\tthis.sugarLevel = Math.floor((Math.random() * 10) + 1);\r\n\t}\r\n\r\n\texecute() {\r\n\t\treturn `Results for blood sugar are: ${this.sugarLevel} , ${this.lastMealTime}.`;\r\n\t}\r\n\r\n}\r\nexport { BloodSugarExam }","class BloodPressureExam{\r\n\r\n\tconstructor() {\r\n\t\tthis.pulse = Math.floor((Math.random() * 150) + 1);\r\n\t\tthis.upperValue = Math.floor((Math.random() * 200) + 1);\r\n\t\tthis.lowerValue = Math.floor((Math.random() * 100) + 1);\r\n\t}\r\n\r\n\texecute() {\r\n\t\treturn `Results for blood pressure are: ${this.upperValue} , ${this.lowerValue}, ${this.pulse}.`;\r\n\t}\r\n\r\n}\r\nexport { BloodPressureExam }","class BloodCholesterolExam{\r\n\r\n\tconstructor() {\r\n\t\tthis.lastMealTime = Date.getTime();\r\n\t\tthis.cholesterolLevel = Math.floor((Math.random() * 10) + 1);\r\n\t}\r\n\r\n\texecute() {\r\n\t\treturn `Results for blood cholesterol are: ${this.cholesterolLevel} , ${this.lastMealTime}.`;\r\n\t}\r\n\r\n}\r\nexport { BloodCholesterolExam }","import { BloodSugarExam } from './BloodSugarExam.js';\r\nimport { BloodPressureExam } from './BloodPressureExam.js';\r\nimport { BloodCholesterolExam } from './BloodCholesterolExam.js';\r\n\r\nclass AppointmentRecord {\r\n\r\n\tconstructor(schedule) {\r\n\t\tthis.schedule = schedule;\r\n\t}\r\n\r\n\treturnResults() {\r\n\t\tvar exam;\r\n\r\n\t\tswitch(this.schedule.type) {\r\n\t\t\tcase 'blood pressure':\r\n\t\t\t\texam = new BloodPressureExam();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'blood cholesterol':\r\n\t\t\t\texam = new BloodCholesterolExam();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'blood sugar':\r\n\t\t\t\texam = new BloodSugarExam();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\texam = new BloodPressureExam();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\t\treturn `Exam ${this.schedule.type} has been done for patient ${this.schedule.patient.firstName}, and ${exam.execute()}`;\r\n\r\n\t}\r\n\r\n}\r\nexport { AppointmentRecord }","class AppointmentSchedule {\r\n\r\n\tconstructor(doctor, patient, type, scheduledDate, scheduledTime) {\r\n\t\tthis.type = type;\r\n\t\tthis.doctor = doctor;\r\n\t\tthis.patient = patient;\r\n\t\tthis.scheduledDate = scheduledDate;\r\n\t\tthis.scheduledTime = scheduledTime;\r\n\t}\r\n\r\n\tschedule() {\r\n\t\treturn ` Appointment ${this.type},  for ${this.patient.firstName} has been successfully scheduled by doctor ${this.doctor.firstName} on ${this.scheduledDate} in ${this.scheduledTime} `;\r\n\t}\r\n}\r\nexport { AppointmentSchedule }","import { Person }  from './medicalInstitution/Person.js';\r\nimport { Doctor }  from './medicalInstitution/Doctor.js';\r\nimport { Patient }  from './medicalInstitution/Patient.js';\r\nimport { AppointmentRecord } from './medicalInstitution/AppointmentRecord.js';\r\nimport { AppointmentSchedule } from './medicalInstitution/AppointmentSchedule.js';\r\n\r\n\r\n(function() {\r\n\r\n\tvar date = new Date();\r\n\r\n\tvar milan = new Doctor(\"Milan\", \"Doktorovic\", \"Gastroenternolog\");\r\n\tconsole.log(`[ ${date} ] kreiran doktor Milan`);\r\n\r\n\tvar dragan = new Patient(\"Dragan\", \"Pacijentic\",1234567891234, 36);\r\n\tconsole.log(`[ ${date} ] kreiran pacijent Dragan`);\r\n\r\n\tdragan.chooseTheDoctor(milan);\r\n\tconsole.log(`[ ${date} ] pacijent izabrao doktora`);\r\n\r\n\tlet appointment1 = new AppointmentSchedule(\"blood sugar\", milan, dragan, date, date.getTime());\r\n\tconsole.log(appointment1.schedule());\r\n\tlet appointment2 = new AppointmentSchedule(\"blood pressure\", milan, dragan, date, date.getTime());\r\n\tconsole.log(appointment2.schedule());\r\n\r\n\tlet record1 = new AppointmentRecord(appointment1);\r\n\tconsole.log(`[ ${new Date} ] ${record1.returnResults()} pregled 1 izvrsen `);\r\n\tlet record2 = new AppointmentRecord(appointment2);\r\n\tconsole.log(` [ ${new Date} ] ${record2.returnResults()} pregled 2 izvrsen `);\r\n\r\n})();"]}